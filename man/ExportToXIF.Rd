% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ExportToXIF.R
\name{ExportToXIF}
\alias{ExportToXIF}
\title{RIF/CIF File Subsetting}
\usage{
ExportToXIF(
  fileName,
  write_to,
  objects,
  offsets,
  fast = TRUE,
  extract_features = FALSE,
  endianness = .Platform$endian,
  verbose = FALSE,
  verbosity = 1,
  overwrite = FALSE,
  display_progress = TRUE,
  ...
)
}
\arguments{
\item{fileName}{path of file to read data from.
It has to be a '.rif' or '.cif' file.}

\item{write_to}{pattern used to export file.
Placeholders, like "\%d/\%s_fromR.\%e", will be substituted:\cr
-\%d: with full path directory of 'fileName'\cr
-\%p: with first parent directory of 'fileName'\cr
-\%e: with extension of 'fileName' (without leading .)\cr
-\%s: with shortname from 'fileName' (i.e. basename without extension).\cr
Exported file extension will be deduced from this pattern. It has to be the same as 'fileName', i.e. .cif or .rif.}

\item{objects}{integers, indices of objects to use. If missing, the default, all objects will be used.}

\item{offsets}{object of class `IFC_offset`. If missing, the default, offsets will be extracted from 'fileName'.\cr
This param is not mandatory but it may allow to save time for repeated XIF export on same file.}

\item{fast}{whether to fast extract objects or not. Default is TRUE.
Meaning that 'objects' will be extracting expecting that raw object are stored in ascending order.
Note that a warning will be sent if an 'object' is found at an unexpected order.
In such a case you may need to rerun function with 'fast' = FALSE.
If set to FALSE, all raw object_ids will be scanned from 'fileName' to ensure extraction of desired 'objects'.
IMPORTANT: whatever this argument is, features are extracted assuming an ascending order of storage in raw file.}

\item{extract_features}{whether to try to extract features. Default is FALSE.}

\item{endianness}{The endian-ness ("big" or "little") of the target system for the file. Default is .Platform$endian.}

\item{verbose}{whether to display information (use for debugging purpose). Default is FALSE.}

\item{verbosity}{quantity of information displayed when verbose is TRUE; 1: normal, 2: rich. Default is 1.}

\item{overwrite}{whether to overwrite file or not. Default is FALSE.\cr
Note that if TRUE, it will overwrite exported file if path of 'fileName' and deduced from 'write_to' arguments are different.
Otherwise, you will get an error saying that overwritting source file is not allowed.\cr
Note also that an original file, i.e. generated by IDEAS(R) or INSPIRE(R), will never be overwritten.
Otherwise, you will get an error saying that overwritting original file is not allowed.\cr}

\item{display_progress}{whether to display a progress bar. Default is TRUE.}

\item{...}{Other arguments to be passed.}
}
\value{
It invisibly returns full path of exported file.
}
\description{
Subsets RIF or CIF files.
}
\details{
Only features stored in binary format will be extracted if found.
If the input fileName is a merged of several files then features will be extracted from these files.\cr
If file(s) can't be found, Warning(s) will be thrown and input fileName will be extracted without features values.
}
\examples{
if(requireNamespace("IFCdata", quietly = TRUE)) {
  tmp <- tempdir(check = TRUE)
  ## use a cif file, but you can also subset rif
  file_cif <- system.file("extdata", "example.cif", package = "IFCdata")
  ## subset "img" object 0,1 and 4 from file
  exported <- ExportToXIF(fileName = file_cif, write_to = paste0(tmp, "\\\\test.cif"),
                          overwrite = TRUE, objects = c(0,1,4))
  ## Display all "img" objects in exported file
  DisplayGallery(info = getInfo(exported), write_to = "example.png")
} else {
  message(sprintf('Please run `install.packages("IFCdata", repos = "\%s", type = "source")` \%s',
                  'https://gitdemont.github.io/IFCdata/',
                  'to install extra files required to run this example.'))
}
}
