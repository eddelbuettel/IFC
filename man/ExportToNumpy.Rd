% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ExportToNumpy.R
\name{ExportToNumpy}
\alias{ExportToNumpy}
\title{Numpy Export}
\usage{
ExportToNumpy(
  display,
  offsets,
  objects,
  objects_type = "img",
  display_progress = TRUE,
  python = Sys.getenv("RETICULATE_PYTHON"),
  dtype = c("uint8", "int16", "uint16", "double")[3],
  mode = c("raw", "gray")[1],
  export = c("file", "matrix")[2],
  export_to,
  overwrite = FALSE,
  ...
)
}
\arguments{
\item{display}{object of class IFC_display, rich information extracted by \code{\link{getDisplayInfo}}. This parameter can't be missing.}

\item{offsets}{object of class IFC_offsets. If missing, the default, offsets will be extracted from display$fileName.\cr
This param is not mandatory but it may allow to save time for repeated image export on same file.}

\item{objects}{integers, indices of objects to use.
This param is not mandatory, if missing, the default, all objects will be used.}

\item{objects_type}{objects_type of desired offsets. Either "img" or "msk". Default is "img".}

\item{display_progress}{whether to display a progress bar. Default is TRUE.}

\item{python}{path to python. Default is Sys.getenv("RETICULATE_PYTHON").\cr
Note that this numpy should be available in this python to be able to export to numpy array file, otherwise 'export' will be forced to "matrix".}

\item{dtype}{desired arrayâ€™s data-type. Default is "double". Allowed are "uint8", "int16", "uint16" or "double". If 'mode' is "raw", this parameter will be forced to "int16".}

\item{mode}{(\code{\link{objectExtract}} argument) color mode export. Either "raw", "gray" . Default is "gray".}

\item{export}{export format. Either "file", "matrix". Default is "matrix".\cr
Note that you will need 'reticulate' package installed to be able to export to numpy array file, otherwise 'export' will be forced to "matrix".}

\item{export_to}{used when 'export' is "file" to compute respectively filename.
Exported type will be deduced from this pattern. Allowed export are '.npy'.\cr
Placeholders, if found, will be substituted:\cr
-\%d: with full path directory of 'display$fileName_image'\cr
-\%p: with first parent directory of ''display$fileName_image'\cr
-\%e: with extension of 'display$fileName_image' (without leading .)\cr
-\%s: with shortname from 'display$fileName_image' (i.e. basename without extension)\cr
-\%o: with objects (at most 10, will be collapse with "_", if more than one).\cr
-\%c: with channel_id (will be collapse with "_", if more than one, composite in any will be bracketed).
A good trick is to use:\cr
-"\%d/\%s_Obj[\%o]_Ch[\%c].npy", when 'export' is "file"\cr}

\item{overwrite}{whether to overwrite file or not. Default is FALSE.}

\item{...}{other arguments to be passed to \code{\link{objectExtract}} with the exception of 'ifd' and bypass(=TRUE).
If 'offsets' are not provided arguments can also be passed to \code{\link{getOffsets}}.}
}
\value{
Depending on 'export':\cr
-"matrix", a numpy array,\cr
-"file", an invisible vector of ids corresponding to the objects exported.
}
\description{
Exports IFC objects to numpy array [objects,height,width,channels]
}
\details{
arguments of \code{\link{objectExtract}} will be deduced from \code{\link{ExportToNumpy}} input arguments.\cr
\code{\link{ExportToNumpy}} requires reticulate package, python and numpy installed. to create npy file.\cr
If one of these is missing, 'export' will be set to "matrix".
}
